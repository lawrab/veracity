[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "veracity-backend"
version = "0.1.0"
description = "Comprehensive social media trend and news trustability platform backend"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Veracity Team"}
]
keywords = ["social-media", "nlp", "trust-scoring", "news-analysis", "trends"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

# Core dependencies
dependencies = [
    # Core Framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database Drivers
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.0",
    "motor>=3.3.0",
    "redis>=5.0.0",
    "elasticsearch>=8.0.0",
    "aiohttp>=3.8.0",
    
    # HTTP Client
    "httpx>=0.25.0",
    
    # Social Media APIs
    "praw>=7.7.0",  # Reddit API
    "tweepy>=4.14.0",  # Twitter API
    
    # Authentication & Security
    "PyJWT>=2.10.1",
    "cryptography>=46.0.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # NLP & Machine Learning
    "spacy>=3.7.0",
    "transformers>=4.35.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    
    # News & Content Processing
    "newspaper3k>=0.2.8",
    "feedparser>=6.0.10",  # RSS feed parsing
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
]

# Optional dependency groups
[project.optional-dependencies]
# Development dependencies
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-env>=1.0.0",
    "faker>=20.0.0",
]

# Production extras
monitoring = [
    "prometheus-client>=0.18.0",
    "sentry-sdk>=1.30.0",
]

# All dependencies for convenience
all = [
    "veracity-backend[dev,test,monitoring]"
]

[project.urls]
Homepage = "https://github.com/your-org/veracity"
Repository = "https://github.com/your-org/veracity.git"
Documentation = "https://veracity.readthedocs.io"
Changelog = "https://github.com/your-org/veracity/blob/main/CHANGELOG.md"

[project.scripts]
veracity-server = "app.main:start_server"

# Tool configurations

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.nox
    | \.tox
    | \.venv
    | venv
    | \.svn
    | _build
    | buck-out
    | build
    | dist
    | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "alembic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # Whitespace before ':' (conflicts with black)
    "W503",  # Line break before binary operator (conflicts with black)
    "W504",  # Line break after binary operator (conflicts with black)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # Unused imports in __init__ files
    "tests/*:S101",      # Use of assert in tests
]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
exclude = [
    "tests/",
    ".venv/",
    "venv/",
]

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "transformers.*",
    "sentence_transformers.*",
    "newspaper.*",
    "praw.*",
    "tweepy.*",
    "motor.*",
    "elasticsearch.*",
    "feedparser.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests that don't require external dependencies",
    "integration: Integration tests requiring database or external services",
    "e2e: End-to-end tests that test complete workflows",
    "slow: Tests that take a long time to run",
    "requires_api: Tests that require external API credentials",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:spacy.*",
    "ignore::FutureWarning:transformers.*",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"